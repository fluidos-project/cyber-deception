#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+options: email:nil f:t inline:t num:nil p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Cyber Deception
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 28.1 (Org mode 9.5.4)
#+cite_export:

This repository aims at collecting tools and documentation to provide Cyber Deception [[[https://ieeexplore.ieee.org/document/8328971][1]],[[https://medium.com/dataseries/what-really-is-cyber-deception-e60dd33e9e41][2]]] service in *FLUIDOS*.

The Cyber Deception feature, part of the FLUIDOS Cyber Security services designed to improve the overall security of the ecosystem, is willing to provide Cloud Native Cyber Deception as a Service (CDaaS) integrated into the FLUIDOS continuum.


A description of a first use-case follow:

"By leveraging FLUIODS, the owner of a local domain will see a continuum across local and remotes resources. Thanks to CDaaS he will also get additional advantages from a given remote domain which offers those security capabilities, so as to take benefit of it and protect the workload running on the FLUIDOS continuum.

At some point a cloud-native application distributed across the two domains is transparently protected by decoys running in the remote cluster, which are created out of the original application components in order to intercept a possible malicious attack."


The research and development activities currently targets the following KPIs:
- Improved integration of Cyber Deception with FLUIDOS and delivery as a service
- Additional monitoring functionalities and extensions to attack tracing and threat intelligence capabilities


The Cyber Deception service currently relies on the features offered by the *Decepto* tool, which is a system that creates decoys as clones of existing services.

Given an application graph (sets of micro-services and data-flows across them) Decepto decides the services to clone as decoys and where to deploy them based on optimization metrics such as the availability of resources.

As shown in the below picture it runs in a Kubernetes cluster and could use multiple external algorithms to take decisions and perform actions.

[[file:decepto-10k-foot-view.png]]

Decepto is being defined with a fully open approach, which facilitates the participation of actors that are outside the FLUIDOS community. Current implementation is available at [[https://gitlab.fbk.eu/cyber-deception/decepto]].

* FLUIDOS Integration

The integration of Cyber Deception within *FLUIDOS* is designed to operate with two main orchestrators: the *Meta-Orchestrator* and *Bastion*. Both orchestrators support the deployment and management of deception services across the FLUIDOS continuum, though they follow slightly different integration paths with respect to how the security feature is activated on a given workload.

Despite the above difference, the core functionality of automatic decoys deployment and the security feature advertisement with the FLUIDOS resource continuumâ€”remains consistent across both orchestrators.

There are two main phases to enable the Cyber Deception security feature in FLUIDOS: *Advertisement* and *Activation*.

** Advertisement of the Capability

- Each provider node must include the proper =FLAVOR= Custom Resource Definition (CRD)
- The patch in order to enable cyber-deception is available under =./utils/flavor-patch.yaml=
- Upon advertising the Cyber Deception feature, [[https://decepto.readthedocs.io/en/latest/installation/install.html][install Decepto]] on the node.

** Activation of the Security feature

- If using the *Meta-Orchestrator*:
  - Add the desired =security-feature= through an annotation in the workload manifest.
  - Example:
    #+begin_src yaml
    annotations:
      fluidos-intent-<feature-name>: "true"
    #+end_src
  - Optional configuration parameters can be passed and validated using the related validation function.
  - Example intent manifest: [[https://github.com/fluidos-project/fluidos-modelbased-metaorchestrator/blob/demo-Y2-stable/utils/testbed/intent-demo.yaml][Intent Example]]

- If using the *Bastion Orchestrator*:
  - Express the requirement by defining the appropriate policy using the Medium-Level Security Policy Language (MSPL).
  - Further reading: [[https://www.sciencedirect.com/science/article/pii/S1389128625003196][MSPL Reference Article]]
